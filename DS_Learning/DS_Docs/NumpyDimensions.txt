Dimensions Notation for 1D:
   -- Notations: (width,) -- It saves the memory by not saving the "1" bcs in 1D we have height for all elements are same which is "1" 
   -- height = 1

Dimensions or shape - Notation for 2D:
   -- Notation: Height * width
   -- Height = Number of rows
   -- Width = Number of columns


NOTE: For 1-Dimension only the default representation is like (3,) or (2,) or (67,) etc...But storing of elements for all Dimensions are in same way.In 1-Dimension we have
"width" comes first and "height" comes second in output.But For remaining Dimensions the "height" comes first and "width" comes as second.

ndarray.shape -- is a property for ndarray

single Dimension --- memory reference or address will be only one -- it's starting memory reference from it's starting point.
2 Dimension -------- memory reference will be only one for whole 2 Dimension But every row has again one more reference.This reference is also sometimes important to optimize 
the code.
   1. Rows(height) --- Each row will have reference -- This reference won't provided by the packages means NumPy won't provide us.

   let say we have --- initial reference = <address>
   -- int type of data in arrays
   -- shape of the NumPy array is (3,2)
   -- give me the address of the 3rd row? -- This question depends by following things:
      --- How the data is formatted/compressed
      --- by default the data will be quantized to normal -- int32
      --- second address of the second row will be = <address> + 8Bytes
      --- third row address will be = <second row address> + 8Bytes
                                      <address> + 8Bytes + 8Bytes
                                      <address> + 2 * 8Bytes
                                      <address> + row_index * width * size of the quantized(compressed or precised) elementa -- remember it as a formulae.


If depth = 3:
    then (Height,Width,3) -- 3D


Colors --- RGB
        3D
        Colors = (R,G,B) -- Here R,G,B we have 3 channels(depth).


        Every Image == height * width * 3 -- If we add transparency to 3 we get "4" in place of "3" but we don't add transparency here.
        Resolution = (Height, Width)


Dimensions - Notation for 3D: or ND
   Book Notation --- Height * Width * Depth
          
      Depth == Number of channels
      channel == (height,width)

      (height, width, 2) -- It is 3D not a 2D array.
      (height, width, depth)

      NOTE:Units will be applied to Height, width



Dimensions - Notation for ND:

   Book Notation --- Number of 3Ds * Height * Width * Depth

        Example: cheez have no.of.slices suppose there are n packates each packet has n slices

        10 * 2 * 2 * 10 

        NOTE: Here "10" is the no.of.packet and "2*2" is the height and width of each slice and last "10" represent no.of.slices it means "Depth(channels)".         
        
         

D1 = [1,2,3]
D1 ---> 1,3

======================== (1,3) or (3,) 

#D2 = list of 1 dimensions
D2 = [[1,2,3,34763784487],[1,2,3,984574396593],[1,2,3,347863783]]
D2 ---> 3,4

======================== (3,4) -- height & width

#D3 = list of 2 dimensions
D3 = [[[1,2,3,7647],[1,2,3,7838],[1,2,3,4875785]],[[1,2,3,476746],[1,2,3,47846],[1,2,3,93874]]]
D3 ---> 2,3,4

======================== (2,3,4) -- (depth, height, width) or (3,4,2) -- (height, width, depth)

#D4 = list of 3 dimensions
D4 = [[[[1,2,3],[1,2,3],[1,2,3]],[[1,2,3],[1,2,3],[1,2,3]]],[[[1,2,3],[1,2,3],[1,2,3]],[[1,2,3],[1,2,3],[1,2,3]]]]
D4 ---> 2,2,3,3

======================== (2,2,3,3) -- (Number of 3Ds * Depth * Height * Width) or (2,3,3,2) -- (Number of 3Ds * Height * Width * Depth) or (3,3,2,2) -- (Width * Height * Depth * Number of 3Ds)


Vectorization & Broadcasting -- These two are just concepts.These are important concepts.
